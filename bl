#!/usr/bin/env python3
import argparse
import tempfile
import shutil
import datetime
import json
import os
import pathlib
import re
import subprocess
import sys
import time
import urllib.error
import urllib.parse
import urllib.request


BL_SPACE = os.getenv('BL_SPACE')
BL_PROJECT = os.getenv('BL_PROJECT')
BL_API_KEY = os.getenv('BL_API_KEY')
BL_REGISTRY = os.getenv('BL_REGISTRY', os.path.join(os.getenv('XDG_CONFIG_HOME', os.path.join(pathlib.Path.home(), '.config')), 'bl', 'registry.json'))

CMD_NAME = 'bl'
CMD_USAGE = '''
usage: bl [<option(s)>] <command> [...]
handle Backlog service.

commands:
  bl create         # create Backlog issue
  bl update         # update Backlog issue
  bl list           # list Backlog issues
  bl show           # show Backlog issue description
  bl edit           # edit Backlog issue description with text editor
  bl open           # open Backlog issue with web browser
  bl resource sync  # sync Backlog resources to caches
  bl resource list  # list Backlog resources from caches
  bl configure      # edit config with text editor
  bl completion     # print evaluatable completion script
  bl help           # print usage and exit

options:
  -h, --help  print usage and exit

environment-variables:
  BL_SPACE     Backlog space domain
  BL_PROJECT   Backlog project key
  BL_API_KEY   Backlog API key
  BL_REGISTRY  registry path (default: ~/.config/bl/registry.json)
'''.strip()
SUBCMD_USAGE = {}
SUBCMD_USAGE['create'] = '''
usage: bl create [<option(s)>]
create Backlog issue.

options:
  -p, --project=PROJECT          create issue on PROJECT
  -I, --parent-issue=ISSUE       issue parent issue
  -s, --summary=SUMMARY          issue summary
  -d, --description=DESCRIPTION  issue description
  -S, --start-date=DATE          issue start date
  -D, --due-date=DATE            issue due date
  -E, --estimated-hours=HOURS    issue estimated hours
  -A, --actual-hours=HOURS       issue actual hours
  -t, --issue-type=ISSUE_TYPE    issue type
  -c, --category=CATEGORY        issue categories
  -v, --version=VERSION          issue versions
  -m, --milestone=MILESTONE      issue milestones
  -P, --priority=PRIORITY        issue priority
  -a, --assignee=USER            issue assignee
  -h, --help                     print usage and exit
'''.strip()
SUBCMD_USAGE['update'] = '''
usage: bl update [<option(s)>]
update Backlog issue.

options:
  -i, --issue=ISSUE              update ISSUE
  -I, --parent-issue=ISSUE       issue parent issue
  -s, --summary=SUMMARY          issue summary
  -d, --description=DESCRIPTION  issue description
  -S, --start-date=DATE          issue start date
  -D, --due-date=DATE            issue due date
  -E, --estimated-hours=HOURS    issue estimated hours
  -A, --actual-hours=HOURS       issue actual hours
  -t, --issue-type=ISSUE_TYPE    issue type
  -c, --category=CATEGORY        issue categories
  -v, --version=VERSION          issue versions
  -m, --milestone=MILESTONE      issue milestones
  -P, --priority=PRIORITY        issue priority
  -T, --status=STATUS            issue status
  -r, --resolution=RESOLUTION    issue resolution
  -a, --assignee=USER            issue assignee
  -h, --help                     print usage and exit
'''.strip()
SUBCMD_USAGE['list'] = '''
usage: bl list [<option(s)>]
list Backlog issues.

options:
  -p, --project=PROJECT        search issues on PROJECT
  -I, --parent-issue=ISSUE     search by parent issues
  -t, --issue-type=ISSUE_TYPE  search by issue types
  -c, --category=CATEGORY      search by categories
  -v, --version=VERSION        search by versions
  -m, --milestone=MILESTONE    search by milestones
  -P, --priority=PRIORITY      search by priorities
  -T, --status=STATUS          search by statuses
  -r, --resolution=RESOLUTION  search by resolution
  -a, --assignee=USER          search by assignee
  -k, --keyword=KEYWORD        search by keyword
  -s, --sort=FIELD             sort issues by field
  -o, --order=ORDER            sort issues with asc or desc
  -O, --offset=OFFSET          search issues with offset
  -C, --count=COUNT            search issues with count
  -h, --help                   print usage and exit
'''.strip()
SUBCMD_USAGE['show'] = '''
usage: bl show [<option(s)>] <issue>
show Backlog issue description.

options:
  -h, --help  print usage and exit
'''.strip()
SUBCMD_USAGE['edit'] = '''
usage: bl edit [<option(s)>] <issue>
edit Backlog issue description with text editor.

options:
  -h, --help  print usage and exit
'''.strip()
SUBCMD_USAGE['open'] = '''
usage: bl open [<option(s)>] <issue>
open Backlog issue with web browser.

options:
  -h, --help  print usage and exit
'''.strip()
SUBCMD_USAGE['resource-sync'] = '''
usage: bl resource sync [<option(s)>]
sync Backlog resources to caches.

options:
  -p, --project=PROJECT  sync resource caches of PROJECT
  -h, --help             print usage and exit
'''.strip()
SUBCMD_USAGE['resource-list'] = '''
usage: bl resource list [<option(s)>] <resource_type>
list Backlog resources from caches.

options:
  -p, --project=PROJECT  list resource caches of PROJECT
  -h, --help             print usage and exit

resource-types:
  spaces
  users
  projects
  issueTypes
  categories
  versions
  priorities
  statuses
  resolutions
'''.strip()
SUBCMD_USAGE['configure'] = '''
usage: bl configure [<option(s)>]
edit config with text editor.

options:
  -h, --help  print usage and exit
'''.strip()
SUBCMD_USAGE['completion'] = '''
usage: bl completion [<option(s)>] <shell>
print evaluatable completion script.

options:
  -h, --help  print usage and exit

shells:
  bash
  zsh
  fish
'''.strip()
SUBCMD_USAGE['help'] = '''
usage: bl help [<option(s)>] [<command>]
print usage and exit.

options:
  -h, --help  print usage and exit
'''.strip()

OPEN_COMMANDS = [
    'xdg-open',
    'open',
]
SORT_FIELDS = [
    'issueType',
    'category',
    'version',
    'milestone',
    'summary',
    'status',
    'priority',
    'attachment',
    'sharedFile',
    'created',
    'createdUser',
    'updated',
    'updatedUser',
    'assignee',
    'startDate',
    'dueDate',
    'estimatedHours',
    'actualHours',
    'childIssue',
]
SORT_ORDERS = [
    'asc',
    'desc',
]
RESOURCE_TYPES = [
    'spaces',
    'users',
    'projects',
    'issueTypes',
    'categories',
    'versions',
    'priorities',
    'statuses',
    'resolutions',
]
VIRTUAL_RESOURCES = {}
VIRTUAL_RESOURCES['priorities'] = {
    '高': {'id': 2, 'displayOrder': 1},
    '中': {'id': 3, 'displayOrder': 2},
    '低': {'id': 4, 'displayOrder': 3},
}
VIRTUAL_RESOURCES['resolutions'] = {
    '対応済み': {'id': 0, 'displayOrder': 1},
    '対応しない': {'id': 1, 'displayOrder': 2},
    '無効': {'id': 2, 'displayOrder': 3},
    '重複': {'id': 3, 'displayOrder': 4},
    '再現しない': {'id': 4, 'displayOrder': 5}
}

SHELL_COMPLETION_SCRIPTS = {}
# embed:start:completion:bash:contrib/completion/bl.bash
SHELL_COMPLETION_SCRIPTS['bash'] = '''
_bl() {
  local cur prev words cword split
  _init_completion -s || return

  local defaultIFS=$IFS
  local IFS=$defaultIFS

  local commands=(
    create
    update
    list
    show
    edit
    open
    resource
    configure
    completion
    help
  )
  local resource_commands=(
    sync
    list
  )
  local options=(
    --help
  )
  local create_options=(
    --project=
    --parent-issue=
    --summary=
    --description=
    --start-date=
    --due-date=
    --estimated-hours=
    --actual-hours=
    --issue-type=
    --category=
    --version=
    --milestone=
    --priority=
    --assignee=
    --help
  )
  local update_options=(
    --issue=
    --parent-issue=
    --summary=
    --description=
    --start-date=
    --due-date=
    --estimated-hours=
    --actual-hours=
    --issue-type=
    --category=
    --version=
    --milestone=
    --priority=
    --status=
    --resolution=
    --assignee=
    --help
  )
  local edit_options=(
    --help
  )
  local list_options=(
    --project=
    --parent-issue=
    --issue-type=
    --category=
    --version=
    --milestone=
    --priority=
    --status=
    --resolution=
    --assignee=
    --keyword=
    --sort=
    --order=
    --offset=
    --count=
    --help
  )
  local show_options=(
    --help
  )
  local open_options=(
    --help
  )
  local resource_sync_options=(
    --project=
    --help
  )
  local resource_list_options=(
    --project=
    --help
  )
  local configure_options=(
    --help
  )
  local completion_options=(
    --help
  )
  local help_options=(
    --help
  )
  local sort_fields=(
    issueType
    category
    version
    milestone
    summary
    status
    priority
    attachment
    sharedFile
    created
    createdUser
    updated
    updatedUser
    assignee
    startDate
    dueDate
    estimatedHours
    actualHours
    childIssue
  )
  local sort_order=(
    asc
    desc
  )
  local resource_types=(
    spaces
    users
    projects
    issueTypes
    categories
    versions
    priorities
    statuses
    resolutions
  )
  local shells=(
    bash
    zsh
    fish
  )

  while true; do
    case $cword in
      1)
        $split && break
        case $cur in
          -*)
            COMPREPLY=( $(compgen -W '"${options[@]}"' -- "$cur") )
            ;;
          *)
            COMPREPLY=( $(compgen -W '"${commands[@]}"' -- "$cur") )
            ;;
        esac
        ;;
      *)
        case ${words[1]} in
          create)
            case $prev in
              -p|--project)
                IFS=$'\\n'; COMPREPLY=( $(compgen -W '$(bl resource list projects)' -- "$cur") ); IFS=$defaultIFS
                break
                ;;
              -t|--issue-type)
                IFS=$'\\n'; COMPREPLY=( $(compgen -W '$(bl resource list issueTypes)' -- "$cur") ); IFS=$defaultIFS
                break
                ;;
              -c|--category)
                IFS=$'\\n'; COMPREPLY=( $(compgen -W '$(bl resource list categories)' -- "$cur") ); IFS=$defaultIFS
                break
                ;;
              -v|--version)
                IFS=$'\\n'; COMPREPLY=( $(compgen -W '$(bl resource list versions)' -- "$cur") ); IFS=$defaultIFS
                break
                ;;
              -m|--milestone)
                IFS=$'\\n'; COMPREPLY=( $(compgen -W '$(bl resource list versions)' -- "$cur") ); IFS=$defaultIFS
                break
                ;;
              -P|--priority)
                IFS=$'\\n'; COMPREPLY=( $(compgen -W '$(bl resource list priorities)' -- "$cur") ); IFS=$defaultIFS
                break
                ;;
              -a|--assignee)
                IFS=$'\\n'; COMPREPLY=( $(compgen -W '$(bl resource list users)' -- "$cur") ); IFS=$defaultIFS
                break
                ;;
            esac
            $split && break
            case $cur in
              -*)
                COMPREPLY=( $(compgen -W '"${create_options[@]}"' -- "$cur") )
                ;;
            esac
            ;;
          update)
            case $prev in
              -t|--issue-type)
                IFS=$'\\n'; COMPREPLY=( $(compgen -W '$(bl resource list issueTypes)' -- "$cur") ); IFS=$defaultIFS
                break
                ;;
              -c|--category)
                IFS=$'\\n'; COMPREPLY=( $(compgen -W '$(bl resource list categories)' -- "$cur") ); IFS=$defaultIFS
                break
                ;;
              -v|--version)
                IFS=$'\\n'; COMPREPLY=( $(compgen -W '$(bl resource list versions)' -- "$cur") ); IFS=$defaultIFS
                break
                ;;
              -m|--milestone)
                IFS=$'\\n'; COMPREPLY=( $(compgen -W '$(bl resource list versions)' -- "$cur") ); IFS=$defaultIFS
                break
                ;;
              -P|--priority)
                IFS=$'\\n'; COMPREPLY=( $(compgen -W '$(bl resource list priorities)' -- "$cur") ); IFS=$defaultIFS
                break
                ;;
              -T|--status)
                IFS=$'\\n'; COMPREPLY=( $(compgen -W '$(bl resource list statuses)' -- "$cur") ); IFS=$defaultIFS
                break
                ;;
              -r|--resolution)
                IFS=$'\\n'; COMPREPLY=( $(compgen -W '$(bl resource list resolutions)' -- "$cur") ); IFS=$defaultIFS
                break
                ;;
              -a|--assignee)
                IFS=$'\\n'; COMPREPLY=( $(compgen -W '$(bl resource list users)' -- "$cur") ); IFS=$defaultIFS
                break
                ;;
            esac
            $split && break
            case $cur in
              -*)
                COMPREPLY=( $(compgen -W '"${update_options[@]}"' -- "$cur") )
                ;;
            esac
            ;;
          list)
            case $prev in
              -p|--project)
                IFS=$'\\n'; COMPREPLY=( $(compgen -W '$(bl resource list projects)' -- "$cur") ); IFS=$defaultIFS
                break
                ;;
              -t|--issue-type)
                IFS=$'\\n'; COMPREPLY=( $(compgen -W '$(bl resource list issueTypes)' -- "$cur") ); IFS=$defaultIFS
                break
                ;;
              -c|--category)
                IFS=$'\\n'; COMPREPLY=( $(compgen -W '$(bl resource list categories)' -- "$cur") ); IFS=$defaultIFS
                break
                ;;
              -v|--version)
                IFS=$'\\n'; COMPREPLY=( $(compgen -W '$(bl resource list versions)' -- "$cur") ); IFS=$defaultIFS
                break
                ;;
              -m|--milestone)
                IFS=$'\\n'; COMPREPLY=( $(compgen -W '$(bl resource list versions)' -- "$cur") ); IFS=$defaultIFS
                break
                ;;
              -P|--priority)
                IFS=$'\\n'; COMPREPLY=( $(compgen -W '$(bl resource list priorities)' -- "$cur") ); IFS=$defaultIFS
                break
                ;;
              -T|--status)
                IFS=$'\\n'; COMPREPLY=( $(compgen -W '$(bl resource list statuses)' -- "$cur") ); IFS=$defaultIFS
                break
                ;;
              -r|--resolution)
                IFS=$'\\n'; COMPREPLY=( $(compgen -W '$(bl resource list resolutions)' -- "$cur") ); IFS=$defaultIFS
                break
                ;;
              -a|--assignee)
                IFS=$'\\n'; COMPREPLY=( $(compgen -W '$(bl resource list users)' -- "$cur") ); IFS=$defaultIFS
                break
                ;;
              -s|--sort)
                COMPREPLY=( $(compgen -W '"${sort_fields[@]}"' -- "$cur") )
                break
                ;;
              -o|--order)
                COMPREPLY=( $(compgen -W '"${sort_order[@]}"' -- "$cur") )
                break
                ;;
            esac
            $split && break
            case $cur in
              -*)
                COMPREPLY=( $(compgen -W '"${list_options[@]}"' -- "$cur") )
                ;;
            esac
            ;;
          show)
            $split && break
            case $cur in
              -*)
                COMPREPLY=( $(compgen -W '"${show_options[@]}"' -- "$cur") )
                ;;
            esac
            ;;
          edit)
            $split && break
            case $cur in
              -*)
                COMPREPLY=( $(compgen -W '"${edit_options[@]}"' -- "$cur") )
                ;;
            esac
            ;;
          open)
            $split && break
            case $cur in
              -*)
                COMPREPLY=( $(compgen -W '"${open_options[@]}"' -- "$cur") )
                ;;
            esac
            ;;
          resource)
            case $cword in
              2)
                $split && break
                COMPREPLY=( $(compgen -W '"${resource_commands[@]}"' -- "$cur") )
                ;;
              *)
                case ${words[2]} in
                  sync)
                    case $prev in
                      -p|--project)
                        IFS=$'\\n'; COMPREPLY=( $(compgen -W '$(bl resource list projects)' -- "$cur") ); IFS=$defaultIFS
                        break
                        ;;
                    esac
                    $split && break
                    case $cur in
                      -*)
                        COMPREPLY=( $(compgen -W '"${resource_sync_options[@]}"' -- "$cur") )
                        ;;
                    esac
                    ;;
                  list)
                    case $prev in
                      -p|--project)
                        IFS=$'\\n'; COMPREPLY=( $(compgen -W '$(bl resource list projects)' -- "$cur") ); IFS=$defaultIFS
                        break
                        ;;
                    esac
                    $split && break
                    case $cur in
                      -*)
                        COMPREPLY=( $(compgen -W '"${resource_list_options[@]}"' -- "$cur") )
                        ;;
                      *)
                        COMPREPLY=( $(compgen -W '"${resource_types[@]}"' -- "$cur") )
                        ;;
                    esac
                    ;;
                esac
                ;;
            esac
            ;;
          configure)
            $split && break
            case $cur in
              -*)
                COMPREPLY=( $(compgen -W '"${configure_options[@]}"' -- "$cur") )
                ;;
            esac
            ;;
          completion)
            $split && break
            case $cur in
              -*)
                COMPREPLY=( $(compgen -W '"${completion_options[@]}"' -- "$cur") )
                ;;
              *)
                COMPREPLY=( $(compgen -W '"${shells[@]}"' -- "$cur") )
                ;;
            esac
            ;;
          help)
            $split && break
            case $cur in
              -*)
                COMPREPLY=( $(compgen -W '"${help_options[@]}"' -- "$cur") )
                ;;
              *)
                case $cword in
                  2)
                    COMPREPLY=( $(compgen -W '"${commands[@]}"' -- "$cur") )
                    ;;
                  3)
                    case ${words[2]} in
                      resource)
                        COMPREPLY=( $(compgen -W '"${resource_commands[@]}"' -- "$cur") )
                        ;;
                    esac
                    ;;
                esac
                ;;
            esac
            ;;
        esac
        ;;
    esac
    break
  done
  [[ $COMPREPLY == *= ]] && compopt -o nospace
  [[ ! $cur =~ ^[\\'\\"] ]] && COMPREPLY=( "${COMPREPLY[@]// /\\\\ }" )
}
complete -F _bl bl
'''.strip()
# embed:end:completion
# embed:start:completion:zsh:contrib/completion/bl.zsh
SHELL_COMPLETION_SCRIPTS['zsh'] = '''
_bl() {
  local users projects issue_types categories versions milestones priorities statuses resolutions
  local commands=(
    'create:create Backlog issue'
    'update:update Backlog issue'
    'list:list Backlog issues'
    'show:show Backlog issue description'
    'edit:edit Backlog issue description with text editor'
    'open:open Backlog issue with web browser'
    'resource:handle Backlog resources'
    'configure:edit config with text editor'
    'completion:print evaluatable completion script'
    'help:print usage and exit'
  )
  local resource_commands=(
    'sync:sync Backlog resources to caches'
    'list:list Backlog resources from caches'
  )
  local sort_fields=(
    'issueType'
    'category'
    'version'
    'milestone'
    'summary'
    'status'
    'priority'
    'attachment'
    'sharedFile'
    'created'
    'createdUser'
    'updated'
    'updatedUser'
    'assignee'
    'startDate'
    'dueDate'
    'estimatedHours'
    'actualHours'
    'childIssue'
  )
  local sort_orders=(
    'asc'
    'desc'
  )
  local resource_types=(
    'spaces'
    'users'
    'projects'
    'issueTypes'
    'categories'
    'versions'
    'priorities'
    'statuses'
    'resolutions'
  )
  local shells=(
    'bash'
    'zsh'
    'fish'
  )

  _arguments -C -S -s \\
    '(-h --help)'{-h,--help}'[print usage and exit]' \\
    '1: :->command' \\
    '*:: :->args'
  case $state in
    command)
      _describe -t 'commands' 'command' commands
      ;;
    args)
      case $words[1] in
        create)
          _arguments -C -S -s \\
            '(-p --project)'{-p,--project}'[create issue on PROJECT]:project:->project' \\
            '(-I --parent-issue)'{-I,--parent-issue}'[issue parent issue]:issue:' \\
            '(-s --summary)'{-s,--summary}'[issue summary]:summary:' \\
            '(-d --description)'{-d,--description}'[issue description]:description:' \\
            '(-S --start-date)'{-S,--start-date}'[issue start date]:date:' \\
            '(-D --due-date)'{-D,--due-date}'[issue due date]:date:' \\
            '(-E --estimated-hours)'{-E,--estimated-hours}'[issue estimated hours]:hours:' \\
            '(-A --actual-hours)'{-A,--actual-hours}'[issue actual hours]:hours:' \\
            '(-t --issue-type)'{-t,--issue-type}'[issue type]:issue type:->issue_type' \\
            '*'{-c,--category}'[issue categories]:category:->category' \\
            '*'{-v,--version}'[issue versions]:version:->version' \\
            '*'{-m,--milestone}'[issue milestones]:milestone:->milestone' \\
            '(-P --priority)'{-P,--priority}'[issue priority]:priority:->priority' \\
            '(-a --assignee)'{-a,--assignee}'[issue assignee]:user:->user' \\
            '(-h --help)'{-h,--help}'[print usage and exit]'
          case $state in
            project)
              projects=( ${(f)"$(bl resource list projects)"} )
              _describe -t 'projects' 'project' projects
              ;;
            issue_type)
              issue_types=( ${(f)"$(bl resource list issueTypes)"} )
              _describe -t 'issue_types' 'issue type' issue_types
              ;;
            category)
              categories=( ${(f)"$(bl resource list categories)"} )
              _describe -t 'categories' 'category' categories
              ;;
            version)
              versions=( ${(f)"$(bl resource list versions)"} )
              _describe -t 'versions' 'version' versions
              ;;
            milestone)
              milestones=( ${(f)"$(bl resource list versions)"} )
              _describe -t 'milestones' 'milestone' milestones
              ;;
            priority)
              priorities=( ${(f)"$(bl resource list priorities)"} )
              _describe -t 'priorities' 'priority' priorities
              ;;
            user)
              users=( ${(f)"$(bl resource list users)"} )
              _describe -t 'users' 'user' users
              ;;
          esac
          ;;
        update)
          _arguments -C -S -s \\
            '(-i --issue)'{-i,--issue}'[update ISSUE]:issue:' \\
            '(-I --parent-issue)'{-I,--parent-issue}'[issue parent issue]:issue:' \\
            '(-s --summary)'{-s,--summary}'[issue summary]:summary:' \\
            '(-d --description)'{-d,--description}'[issue description]:description:' \\
            '(-S --start-date)'{-S,--start-date}'[issue start date]:date:' \\
            '(-D --due-date)'{-D,--due-date}'[issue due date]:date:' \\
            '(-E --estimated-hours)'{-E,--estimated-hours}'[issue estimated hours]:hours:' \\
            '(-A --actual-hours)'{-A,--actual-hours}'[issue actual hours]:hours:' \\
            '(-t --issue-type)'{-t,--issue-type}'[issue type]:issue type:->issue_type' \\
            '*'{-c,--category}'[issue categories]:category:->category' \\
            '*'{-v,--version}'[issue versions]:version:->version' \\
            '*'{-m,--milestone}'[issue milestones]:milestone:->milestone' \\
            '(-P --priority)'{-P,--priority}'[issue priority]:priority:->priority' \\
            '(-T --status)'{-T,--status}'[issue status]:status:->status' \\
            '(-r --resolution)'{-r,--resolution}'[issue resolution]:resolution:->resolution' \\
            '(-a --assignee)'{-a,--assignee}'[issue assignee]:user:->user' \\
            '(-h --help)'{-h,--help}'[print usage and exit]'
          case $state in
            issue_type)
              issue_types=( ${(f)"$(bl resource list issueTypes)"} )
              _describe -t 'issue_types' 'issue type' issue_types
              ;;
            category)
              categories=( ${(f)"$(bl resource list categories)"} )
              _describe -t 'categories' 'category' categories
              ;;
            version)
              versions=( ${(f)"$(bl resource list versions)"} )
              _describe -t 'versions' 'version' versions
              ;;
            milestone)
              milestones=( ${(f)"$(bl resource list versions)"} )
              _describe -t 'milestones' 'milestone' milestones
              ;;
            priority)
              priorities=( ${(f)"$(bl resource list priorities)"} )
              _describe -t 'priorities' 'priority' priorities
              ;;
            status)
              statuses=( ${(f)"$(bl resource list statuses)"} )
              _describe -t 'statuses' 'status' statuses
              ;;
            resolution)
              resolutions=( ${(f)"$(bl resource list resolutions)"} )
              _describe -t 'resolutions' 'resolution' resolutions
              ;;
            user)
              users=( ${(f)"$(bl resource list users)"} )
              _describe -t 'users' 'user' users
              ;;
          esac
          ;;
        list)
          _arguments -C -S -s \\
            '(-p --project)'{-p,--project}'[create issue on PROJECT]:project:->project' \\
            '*'{-I,--parent-issue}'[issue parent issue]:issue:' \\
            '*'{-t,--issue-type}'[issue type]:issue type:->issue_type' \\
            '*'{-c,--category}'[issue categories]:category:->category' \\
            '*'{-v,--version}'[issue versions]:version:->version' \\
            '*'{-m,--milestone}'[issue milestones]:milestone:->milestone' \\
            '*'{-P,--priority}'[issue priority]:priority:->priority' \\
            '*'{-T,--status}'[issue status]:status:->status' \\
            '*'{-r,--resolution}'[issue resolution]:resolution:->resolution' \\
            '*'{-a,--assignee}'[issue assignee]:user:->user' \\
            '(-k --keyword)'{-k,--keyword}'[search by keyword]:keyword:' \\
            '(-s --sort)'{-s,--sort}'[sort issues by field]:sort field:->sort_field' \\
            '(-o --order)'{-o,--order}'[sort issues with asc or desc]:sort order:->sort_order' \\
            '(-O --offset)'{-O,--offset}'[search issues with offset]:offset:' \\
            '(-C --count)'{-C,--count}'[search issues with count]:count:' \\
            '(-h --help)'{-h,--help}'[print usage and exit]'
          case $state in
            issue_type)
              issue_types=( ${(f)"$(bl resource list issueTypes)"} )
              _describe -t 'issue_types' 'issue type' issue_types
              ;;
            category)
              categories=( ${(f)"$(bl resource list categories)"} )
              _describe -t 'categories' 'category' categories
              ;;
            version)
              versions=( ${(f)"$(bl resource list versions)"} )
              _describe -t 'versions' 'version' versions
              ;;
            milestone)
              milestones=( ${(f)"$(bl resource list versions)"} )
              _describe -t 'milestones' 'milestone' milestones
              ;;
            priority)
              priorities=( ${(f)"$(bl resource list priorities)"} )
              _describe -t 'priorities' 'priority' priorities
              ;;
            status)
              statuses=( ${(f)"$(bl resource list statuses)"} )
              _describe -t 'statuses' 'status' statuses
              ;;
            resolution)
              resolutions=( ${(f)"$(bl resource list resolutions)"} )
              _describe -t 'resolutions' 'resolution' resolutions
              ;;
            user)
              users=( ${(f)"$(bl resource list users)"} )
              _describe -t 'users' 'user' users
              ;;
            sort_field)
              _describe -t 'sort_fields' 'sort field' sort_fields
              ;;
            sort_order)
              _describe -t 'sort_orders' 'sort field' sort_orders
              ;;
          esac
          ;;
        show)
          _arguments -C -S -s \\
            '(-h --help)'{-h,--help}'[print usage and exit]' \\
            '1:issue:'
          ;;
        edit)
          _arguments -C -S -s \\
            '(-h --help)'{-h,--help}'[print usage and exit]' \\
            '1:issue:'
          ;;
        open)
          _arguments -C -S -s \\
            '(-h --help)'{-h,--help}'[print usage and exit]' \\
            '1:issue:'
          ;;
        resource)
          _arguments -C -S -s \\
            '1: :->resource_command' \\
            '*:: :->args'
          case $state in
            resource_command)
              _describe -t 'commands' 'command' resource_commands
              ;;
            args)
              case $words[1] in
                sync)
                  _arguments -C -S -s \\
                    '(-p --project)'{-p,--project}'[create issue on PROJECT]:project:->project' \\
                    '(-h --help)'{-h,--help}'[print usage and exit]'
                  case $state in
                    project)
                      projects=( ${(f)"$(bl resource list projects)"} )
                      _describe -t 'projects' 'project' projects
                      ;;
                  esac
                  ;;
                list)
                  _arguments -C -S -s \\
                    '(-p --project)'{-p,--project}'[create issue on PROJECT]:project:->project' \\
                    '(-h --help)'{-h,--help}'[print usage and exit]' \\
                    '1: :->resource_type'
                  case $state in
                    project)
                      projects=( ${(f)"$(bl resource list projects)"} )
                      _describe -t 'projects' 'project' projects
                      ;;
                    resource_type)
                      _describe -t 'resource_types' 'resource type' resource_types
                      ;;
                  esac
                  ;;
              esac
              ;;
          esac
          ;;
        configure)
          _arguments -C -S -s \\
            '(-h --help)'{-h,--help}'[print usage and exit]'
          ;;
        completion)
          _arguments -C -S -s \\
            '(-h --help)'{-h,--help}'[print usage and exit]' \\
            '1: :->shell'
          case $state in
            shell)
              _describe -t 'shells' 'shell' shells
              ;;
          esac
          ;;
        help)
          _arguments -C -S -s \\
            '(-h --help)'{-h,--help}'[print usage and exit]' \\
            '1: :->help_command' \\
            '*:: :->args'
          case $state in
            help_command)
              _describe -t 'commands' 'command' commands
              ;;
            args)
              case $words[1] in
                resource)
                  _arguments -C -S -s \\
                    '1: :->help_resource_command'
                  case $state in
                    help_resource_command)
                      _describe -t 'commands' 'command' resource_commands
                      ;;
                  esac
                  ;;
              esac
              ;;
          esac
          ;;
      esac
      ;;
  esac
}

compdef _bl bl
'''.strip()
# embed:end:completion
# embed:start:completion:fish:contrib/completion/bl.fish
SHELL_COMPLETION_SCRIPTS['fish'] = '''
complete -c bl -x
complete -c bl -n '__fish_no_arguments' -s h -l help -d 'Print usage and exit'
complete -c bl -n '__fish_use_subcommand' -xa create -d 'Create Backlog issue'
complete -c bl -n '__fish_seen_subcommand_from create' -s p -l project -xa '(bl resource list projects)' -d 'Create issue on PROJECT'
complete -c bl -n '__fish_seen_subcommand_from create' -s I -l parent-issue -d 'Issue parent issue'
complete -c bl -n '__fish_seen_subcommand_from create' -s s -l summary -d 'Issue summary'
complete -c bl -n '__fish_seen_subcommand_from create' -s d -l description -d 'Issue description'
complete -c bl -n '__fish_seen_subcommand_from create' -s S -l start-date -d 'Issue start date'
complete -c bl -n '__fish_seen_subcommand_from create' -s D -l due-date -d 'Issue due date'
complete -c bl -n '__fish_seen_subcommand_from create' -s E -l estimated-hours -d 'Issue estimated hours'
complete -c bl -n '__fish_seen_subcommand_from create' -s A -l actual-hours -d 'Issue actual hours'
complete -c bl -n '__fish_seen_subcommand_from create' -s t -l issue-type -xa '(bl resource list issueTypes)' -d 'Issue type'
complete -c bl -n '__fish_seen_subcommand_from create' -s c -l category -xa '(bl resource list categories)' -d 'Issue categories'
complete -c bl -n '__fish_seen_subcommand_from create' -s v -l version -xa '(bl resource list versions)' -d 'Issue versions'
complete -c bl -n '__fish_seen_subcommand_from create' -s m -l milestone -xa '(bl resource list versions)' -d 'Issue milestones'
complete -c bl -n '__fish_seen_subcommand_from create' -s P -l priority -xa '(bl resource list priorities)' -d 'Issue priority'
complete -c bl -n '__fish_seen_subcommand_from create' -s a -l assignee -xa '(bl resource list users)' -d 'Issue assignee'
complete -c bl -n '__fish_seen_subcommand_from create' -s h -l help -d 'Print usage and exit'
complete -c bl -n '__fish_use_subcommand' -xa update -d 'Update Backlog issue'
complete -c bl -n '__fish_seen_subcommand_from update' -s i -l issue -d 'Update ISSUE'
complete -c bl -n '__fish_seen_subcommand_from update' -s I -l parent-issue -d 'Issue parent issue'
complete -c bl -n '__fish_seen_subcommand_from update' -s s -l summary -d 'Issue summary'
complete -c bl -n '__fish_seen_subcommand_from update' -s d -l description -d 'Issue description'
complete -c bl -n '__fish_seen_subcommand_from update' -s S -l start-date -d 'Issue start date'
complete -c bl -n '__fish_seen_subcommand_from update' -s D -l due-date -d 'Issue due date'
complete -c bl -n '__fish_seen_subcommand_from update' -s E -l estimated-hours -d 'Issue estimated hours'
complete -c bl -n '__fish_seen_subcommand_from update' -s A -l actual-hours -d 'Issue actual hours'
complete -c bl -n '__fish_seen_subcommand_from update' -s t -l issue-type -xa '(bl resource list issueTypes)' -d 'Issue type'
complete -c bl -n '__fish_seen_subcommand_from update' -s c -l category -xa '(bl resource list categories)' -d 'Issue categories'
complete -c bl -n '__fish_seen_subcommand_from update' -s v -l version -xa '(bl resource list versions)' -d 'Issue versions'
complete -c bl -n '__fish_seen_subcommand_from update' -s m -l milestone -xa '(bl resource list versions)' -d 'Issue milestones'
complete -c bl -n '__fish_seen_subcommand_from update' -s P -l priority -xa '(bl resource list priorities)' -d 'Issue priority'
complete -c bl -n '__fish_seen_subcommand_from update' -s T -l status -xa '(bl resource list statuses)' -d 'Issue status'
complete -c bl -n '__fish_seen_subcommand_from update' -s r -l resolution -xa '(bl resource list resolutions)' -d 'Issue resolution'
complete -c bl -n '__fish_seen_subcommand_from update' -s a -l assignee -xa '(bl resource list users)' -d 'Issue assignee'
complete -c bl -n '__fish_seen_subcommand_from update' -s h -l help -d 'Print usage and exit'
complete -c bl -n '__fish_use_subcommand' -xa list -d 'List Backlog issues'
complete -c bl -n '__fish_seen_subcommand_from list' -s p -l project -xa '(bl resource list projects)' -d 'Create issue on PROJECT'
complete -c bl -n '__fish_seen_subcommand_from list' -s I -l parent-issue -d 'Search by parent issues'
complete -c bl -n '__fish_seen_subcommand_from list' -s t -l issue-type -xa '(bl resource list issueTypes)' -d 'Search by issue types'
complete -c bl -n '__fish_seen_subcommand_from list' -s c -l category -xa '(bl resource list categories)' -d 'Search by categories'
complete -c bl -n '__fish_seen_subcommand_from list' -s v -l version -xa '(bl resource list versions)' -d 'Search by versions'
complete -c bl -n '__fish_seen_subcommand_from list' -s m -l milestone -xa '(bl resource list versions)' -d 'Search by milestones'
complete -c bl -n '__fish_seen_subcommand_from list' -s P -l priority -xa '(bl resource list priorities)' -d 'Search by priorities'
complete -c bl -n '__fish_seen_subcommand_from list' -s T -l status -xa '(bl resource list statuses)' -d 'Search by statuses'
complete -c bl -n '__fish_seen_subcommand_from list' -s r -l resolution -xa '(bl resource list resolutions)' -d 'Search by resolution'
complete -c bl -n '__fish_seen_subcommand_from list' -s a -l assignee -xa '(bl resource list users)' -d 'Search by assignee'
complete -c bl -n '__fish_seen_subcommand_from list' -s k -l keyword -d 'Search by keyword'
complete -c bl -n '__fish_seen_subcommand_from list' -s s -l sort -xa 'issueType category version milestone summary status priority attachment sharedFile created createdUser updated updatedUser assignee startDate dueDate estimatedHours actualHours childIssue' -d 'Sort issues by field'
complete -c bl -n '__fish_seen_subcommand_from list' -s o -l order -xa 'asc desc' -d 'Sort issues with asc or desc'
complete -c bl -n '__fish_seen_subcommand_from list' -s O -l offset -d 'Search issues with offset'
complete -c bl -n '__fish_seen_subcommand_from list' -s C -l count -d 'Search issues with count'
complete -c bl -n '__fish_seen_subcommand_from list' -s h -l help -d 'Print usage and exit'
complete -c bl -n '__fish_use_subcommand' -xa show -d 'Show Backlog issue description'
complete -c bl -n '__fish_seen_subcommand_from show' -s h -l help -d 'Print usage and exit'
complete -c bl -n '__fish_use_subcommand' -xa edit -d 'Edit Backlog issue description with text editor'
complete -c bl -n '__fish_seen_subcommand_from edit' -s h -l help -d 'Print usage and exit'
complete -c bl -n '__fish_use_subcommand' -xa open -d 'Open Backlog issue with web browser'
complete -c bl -n '__fish_seen_subcommand_from open' -s h -l help -d 'Print usage and exit'
complete -c bl -n '__fish_use_subcommand' -xa resource -d 'Handle Backlog resources'
complete -c bl -n '__fish_seen_subcommand_from resource; and not __fish_seen_subcommand_from sync list' -xa sync -d 'Sync Backlog resources to caches'
complete -c bl -n '__fish_seen_subcommand_from resource; and __fish_seen_subcommand_from sync' -s p -l project -xa '(bl resource list projects)' -d 'Sync resource caches of PROJECT'
complete -c bl -n '__fish_seen_subcommand_from resource; and __fish_seen_subcommand_from sync' -s h -l help -d 'Print usage and exit'
complete -c bl -n '__fish_seen_subcommand_from resource; and not __fish_seen_subcommand_from sync list' -xa list -d 'List Backlog resources from caches'
complete -c bl -n '__fish_seen_subcommand_from resource; and __fish_seen_subcommand_from list' -s p -l project -xa '(bl resource list projects)' -d 'List resource caches of PROJECT'
complete -c bl -n '__fish_seen_subcommand_from resource; and __fish_seen_subcommand_from list' -s h -l help -d 'Print usage and exit'
complete -c bl -n '__fish_seen_subcommand_from resource; and __fish_seen_subcommand_from list' -xa 'spaces users projects issueTypes categories versions priorities statuses resolutions' -d 'Resource type'
complete -c bl -n '__fish_use_subcommand' -xa configure -d 'Edit config with text editor'
complete -c bl -n '__fish_seen_subcommand_from completion' -s h -l help -d 'Print usage and exit'
complete -c bl -n '__fish_use_subcommand' -xa completion -d 'Print evaluatable completion script'
complete -c bl -n '__fish_seen_subcommand_from completion' -s h -l help -d 'Print usage and exit'
complete -c bl -n '__fish_seen_subcommand_from completion' -xa 'bash zsh fish' -d 'Shell'
complete -c bl -n '__fish_use_subcommand' -xa help -d 'Print usage and exit'
complete -c bl -n '__fish_seen_subcommand_from help; and not __fish_seen_subcommand_from resource' -s h -l help -d 'Print usage and exit'
complete -c bl -n '__fish_seen_subcommand_from help; and not __fish_seen_subcommand_from resource' -xa create -d 'Command'
complete -c bl -n '__fish_seen_subcommand_from help; and not __fish_seen_subcommand_from resource' -xa update -d 'Command'
complete -c bl -n '__fish_seen_subcommand_from help; and not __fish_seen_subcommand_from resource' -xa list -d 'Command'
complete -c bl -n '__fish_seen_subcommand_from help; and not __fish_seen_subcommand_from resource' -xa show -d 'Command'
complete -c bl -n '__fish_seen_subcommand_from help; and not __fish_seen_subcommand_from resource' -xa edit -d 'Command'
complete -c bl -n '__fish_seen_subcommand_from help; and not __fish_seen_subcommand_from resource' -xa open -d 'Command'
complete -c bl -n '__fish_seen_subcommand_from help; and not __fish_seen_subcommand_from resource' -xa resource -d 'Command'
complete -c bl -n '__fish_seen_subcommand_from help; and __fish_seen_subcommand_from resource' -xa sync -d 'Command'
complete -c bl -n '__fish_seen_subcommand_from help; and __fish_seen_subcommand_from resource' -xa list -d 'Command'
complete -c bl -n '__fish_seen_subcommand_from help; and not __fish_seen_subcommand_from resource' -xa configure -d 'Command'
complete -c bl -n '__fish_seen_subcommand_from help; and not __fish_seen_subcommand_from resource' -xa completion -d 'Command'
complete -c bl -n '__fish_seen_subcommand_from help; and not __fish_seen_subcommand_from resource' -xa help -d 'Command'
'''.strip()
# embed:end:completion


class PreconditionError(Exception):
    pass


def warn(e: str):
    print(f'{CMD_NAME}: {e}', file=sys.stderr)


def recursive_get(d: dict, keys: list[str], default_value: object = None):
    cur = d
    for key in keys:
        if key not in cur:
            return default_value
        cur = cur[key]
    return cur


def recursive_set(d: dict, keys: list[str], value: object):
    cur = d
    for key in keys[:-1]:
        if key not in cur:
            cur[key] = {}
        cur = cur[key]
    cur[keys[-1]] = value


def recursive_set_default(d: dict, keys: list[str], value: object):
    cur = d
    for key in keys[:-1]:
        if key not in cur:
            cur[key] = {}
        cur = cur[key]
    if keys[-1] not in cur:
        cur[keys[-1]] = value


def load_registry():
    if BL_REGISTRY is None:
        raise PreconditionError('BL_REGISTRY is not set')
    registry_path = pathlib.Path(BL_REGISTRY)
    if registry_path.exists():
        return json.loads(registry_path.read_text())
    else:
        return {'version': '1.0', 'defaults': {}, 'caches': {}}


def save_registry(registry: dict):
    if BL_REGISTRY is None:
        raise PreconditionError('BL_REGISTRY is not set')
    registry_path = pathlib.Path(BL_REGISTRY)
    registry_path.parent.mkdir(parents=True, exist_ok=True)
    registry_path.write_text(json.dumps(registry, ensure_ascii=False, indent=2) + '\n')


def request_get_backlog_resources(api_path: str, method: str = 'GET', params: dict = {}, delay_sec: int = 0):
    if BL_SPACE is None:
        raise PreconditionError('BL_SPACE is not set')
    if BL_API_KEY is None:
        raise PreconditionError('BL_API_KEY is not set')
    query = urllib.parse.urlencode(params, doseq=True)
    query = f'&{query}' if query != '' else query
    req = urllib.request.Request(f'https://{BL_SPACE}{api_path}?apiKey={BL_API_KEY}{query}', method=method)
    with urllib.request.urlopen(req) as res:
        result = json.loads(res.read().decode('utf-8'))
        time.sleep(delay_sec)
        return result


def request_post_backlog_resources(api_path: str, method: str = 'POST', params: dict = {}, delay_sec: int = 0):
    if BL_SPACE is None:
        raise PreconditionError('BL_SPACE is not set')
    if BL_API_KEY is None:
        raise PreconditionError('BL_API_KEY is not set')
    headers = {'Content-Type': 'application/x-www-form-urlencoded'}
    data = urllib.parse.urlencode(params, doseq=True).encode('utf-8')
    req = urllib.request.Request(f'https://{BL_SPACE}{api_path}?apiKey={BL_API_KEY}', method=method, headers=headers, data=data)
    with urllib.request.urlopen(req) as res:
        result = json.loads(res.read().decode('utf-8'))
        time.sleep(delay_sec)
        return result


def do_create(args: argparse.Namespace):
    if BL_SPACE is None:
        raise PreconditionError('BL_SPACE is not set')
    if BL_API_KEY is None:
        raise PreconditionError('BL_API_KEY is not set')

    today = datetime.datetime.today()
    registry = load_registry()

    project = None if args.project == '' else args.project or BL_PROJECT
    if project is None:
        raise PreconditionError('no input project')
    project_id = recursive_get(registry, ['caches', 'spaces', BL_SPACE, 'projects', project, 'id'])
    if project_id is None:
        raise PreconditionError(f'project not synced \'{project}\'')

    defaults = recursive_get(registry, ['defaults', 'spaces', BL_SPACE, 'projects', project, 'create'], {})
    users = recursive_get(registry, ['caches', 'spaces', BL_SPACE, 'users'], {})
    resources = recursive_get(registry, ['caches', 'spaces', BL_SPACE, 'projects', project], {})

    parent_issue = '' if args.parent_issue == '' else args.parent_issue or defaults.get('parentIssue')
    summary = '' if args.summary == '' else args.summary
    description = '' if args.description == '' else args.description
    start_date = '' if args.start_date == '' else args.start_date or defaults.get('startDate')
    due_date = '' if args.due_date == '' else args.due_date or defaults.get('dueDate')
    estimated_hours = '' if args.estimated_hours == '' else args.estimated_hours or defaults.get('estimatedHours')
    actual_hours = '' if args.actual_hours == '' else args.actual_hours or defaults.get('actualHours')
    issue_type = '' if args.issue_type == '' else args.issue_type or defaults.get('issueType')
    categories = [] if args.categories == [] else args.categories or defaults.get('categories')
    versions = [] if args.versions == [] else args.versions or defaults.get('versions')
    milestones = [] if args.milestones == [] else args.milestones or defaults.get('milestones')
    priority = '' if args.priority == '' else args.priority or defaults.get('priority')
    assignee = '' if args.assignee == '' else args.assignee or defaults.get('assignee')
    if summary is None or summary == '':
        raise PreconditionError('no input summary')
    if issue_type is None or issue_type == '':
        raise PreconditionError('no input issue type')
    if not (issue_type is None or issue_type == '') and recursive_get(resources, ['issueTypes', issue_type, 'id']) is None:
        raise PreconditionError(f'unrecognized issue type \'{issue_type}\'')
    if not (categories is None or categories == [] or categories == ['']) and any([recursive_get(resources, ['categories', c, 'id']) is None for c in categories]):
        raise PreconditionError('unrecognized category %s' % ', '.join([f'\'{c}\'' for c in categories if recursive_get(resources, ['categories', c, 'id']) is None]))
    if not (versions is None or versions == [] or versions == ['']) and any([recursive_get(resources, ['versions', v, 'id']) is None for v in versions]):
        raise PreconditionError('unrecognized version %s' % ', '.join([f'\'{v}\'' for v in versions if recursive_get(resources, ['versions', v, 'id']) is None]))
    if not (milestones is None or milestones == [] or milestones == ['']) and any([recursive_get(resources, ['versions', m, 'id']) is None for m in milestones]):
        raise PreconditionError('unrecognized milestone %s' % ', '.join([f'\'{m}\'' for m in milestones if recursive_get(resources, ['versions', m, 'id']) is None]))
    if priority is None or priority == '':
        raise PreconditionError('no input priority')
    if not (priority is None or priority == '') and recursive_get(VIRTUAL_RESOURCES, ['priorities', priority, 'id']) is None:
        raise PreconditionError(f'unrecognized priority \'{priority}\'')
    if not (assignee is None or assignee == '') and recursive_get(users, [assignee, 'id']) is None:
        raise PreconditionError(f'unrecognized user \'{assignee}\'')

    params = {}
    if project_id is not None and project_id != '':
        params['projectId'] = project_id
    if parent_issue is not None and parent_issue != '':
        params['parentIssueId'] = recursive_get(resources, ['issues', parent_issue, 'id']) or request_get_backlog_resources(f'/api/v2/issues/{parent_issue}', delay_sec=1)['id']
    if summary is not None and summary != '':
        params['summary'] = summary
    if description is not None and description != '' or description is None and recursive_get(resources, ['issueTypes', issue_type, 'templateDescription']) is not None:
        params['description'] = description or recursive_get(resources, ['issueTypes', issue_type, 'templateDescription'])
    if start_date is not None and start_date != '':
        params['startDate'] = today.strftime('%Y-%m-%d') if start_date == 'today' else start_date
    if due_date is not None and due_date != '':
        params['dueDate'] = today.strftime('%Y-%m-%d') if due_date == 'today' else due_date
    if estimated_hours is not None and estimated_hours != '':
        params['estimatedHours'] = estimated_hours
    if actual_hours is not None and actual_hours != '':
        params['actualHours'] = actual_hours
    if issue_type is not None and issue_type != '':
        params['issueTypeId'] = recursive_get(resources, ['issueTypes', issue_type, 'id'])
    if categories is not None and categories != [] and categories != [''] and len(categories) >= 1:
        params['categoryId[]'] = [recursive_get(resources, ['categories', c, 'id']) for c in categories]
    if versions is not None and versions != [] and versions != [''] and len(versions) >= 1:
        params['versionId[]'] = [recursive_get(resources, ['versions', v, 'id']) for v in versions]
    if milestones is not None and milestones != [] and milestones != [''] and len(milestones) >= 1:
        params['milestoneId[]'] = [recursive_get(resources, ['versions', m, 'id']) for m in milestones]
    if priority is not None and priority != '':
        params['priorityId'] = recursive_get(VIRTUAL_RESOURCES, ['priorities', priority, 'id'])
    if assignee is not None and assignee != '':
        params['assigneeId'] = recursive_get(users, [assignee, 'id'])

    resource = request_post_backlog_resources('/api/v2/issues', method='POST', params=params)
    print(f'{resource['issueKey']} {resource['summary']}')

    if 'parentIssueId' in params and recursive_get(resources, ['issues', parent_issue, 'id']) is None:
        recursive_set(resources, ['issues', parent_issue, 'id'], params['parentIssueId'])
        save_registry(registry)


def do_update(args: argparse.Namespace):
    if BL_SPACE is None:
        raise PreconditionError('BL_SPACE is not set')
    if BL_API_KEY is None:
        raise PreconditionError('BL_API_KEY is not set')

    today = datetime.datetime.today()
    registry = load_registry()

    issue = args.issue
    if issue is None:
        raise PreconditionError('no input issue')
    issue_match = re.match(r'([^-]+)-([^-]+)', issue)
    if issue_match is None:
        raise PreconditionError(f'issue format is invalid \'{issue}\'')
    project = issue_match.group(1)
    project_id = recursive_get(registry, ['caches', 'spaces', BL_SPACE, 'projects', project, 'id'])
    if project_id is None:
        raise PreconditionError(f'project not synced \'{project}\'')

    users = recursive_get(registry, ['caches', 'spaces', BL_SPACE, 'users'], {})
    resources = recursive_get(registry, ['caches', 'spaces', BL_SPACE, 'projects', project], {})

    parent_issue = args.parent_issue
    summary = args.summary
    description = args.description
    start_date = args.start_date
    due_date = args.due_date
    estimated_hours = args.estimated_hours
    actual_hours = args.actual_hours
    issue_type = args.issue_type
    categories = args.categories
    versions = args.versions
    milestones = args.milestones
    priority = args.priority
    status = args.status
    resolution = args.resolution
    assignee = args.assignee
    if summary == '':
        raise PreconditionError('summary cannot be unset')
    if issue_type == '':
        raise PreconditionError('issue type cannot be unset')
    if not (issue_type is None or issue_type == '') and recursive_get(resources, ['issueTypes', issue_type, 'id']) is None:
        raise PreconditionError(f'unrecognized issue type \'{issue_type}\'')
    if not (categories is None or categories == [] or categories == ['']) and any([recursive_get(resources, ['categories', c, 'id']) is None for c in categories]):
        raise PreconditionError('unrecognized category %s' % ', '.join([f'\'{c}\'' for c in categories if recursive_get(resources, ['categories', c, 'id']) is None]))
    if not (versions is None or versions == [] or versions == ['']) and any([recursive_get(resources, ['versions', v, 'id']) is None for v in versions]):
        raise PreconditionError('unrecognized version %s' % ', '.join([f'\'{v}\'' for v in versions if recursive_get(resources, ['versions', v, 'id']) is None]))
    if not (milestones is None or milestones == [] or milestones == ['']) and any([recursive_get(resources, ['versions', m, 'id']) is None for m in milestones]):
        raise PreconditionError('unrecognized milestone %s' % ', '.join([f'\'{m}\'' for m in milestones if recursive_get(resources, ['versions', m, 'id']) is None]))
    if priority == '':
        raise PreconditionError('priority cannot be unset')
    if not (priority is None or priority == '') and recursive_get(VIRTUAL_RESOURCES, ['priorities', priority, 'id']) is None:
        raise PreconditionError(f'unrecognized priority \'{priority}\'')
    if status == '':
        raise PreconditionError('status cannot be unset')
    if not (status is None or status == '') and recursive_get(resources, ['statuses', status, 'id']) is None:
        raise PreconditionError(f'unrecognized status \'{status}\'')
    if not (resolution is None or resolution == '') and recursive_get(VIRTUAL_RESOURCES, ['resolutions', resolution, 'id']) is None:
        raise PreconditionError(f'unrecognized status \'{status}\'')
    if not (assignee is None or assignee == '') and recursive_get(users, [assignee, 'id']) is None:
        raise PreconditionError(f'unrecognized user \'{assignee}\'')

    params = {}
    if parent_issue is not None:
        params['parentIssueId'] = '' if parent_issue == '' else (recursive_get(resources, ['issues', parent_issue, 'id']) or request_get_backlog_resources(f'/api/v2/issues/{parent_issue}', delay_sec=1)['id'])
    if summary is not None:
        params['summary'] = summary
    if description is not None:
        params['description'] = description
    if start_date is not None:
        params['startDate'] = '' if start_date == '' else today.strftime('%Y-%m-%d') if start_date == 'today' else start_date
    if due_date is not None:
        params['dueDate'] = '' if due_date == '' else today.strftime('%Y-%m-%d') if due_date == 'today' else due_date
    if estimated_hours is not None:
        params['estimatedHours'] = estimated_hours
    if actual_hours is not None:
        params['actualHours'] = actual_hours
    if issue_type is not None:
        params['issueTypeId'] = '' if issue_type == '' else recursive_get(resources, ['issueTypes', issue_type, 'id'])
    if categories is not None:
        params['categoryId[]'] = '' if categories == [''] else [recursive_get(resources, ['categories', c, 'id']) for c in categories]
    if versions is not None:
        params['versionId[]'] = '' if versions == [''] else [recursive_get(resources, ['versions', v, 'id']) for v in versions]
    if milestones is not None:
        params['milestoneId[]'] = '' if milestones == [''] else [recursive_get(resources, ['versions', m, 'id']) for m in milestones]
    if priority is not None:
        params['priorityId'] = '' if priority == '' else recursive_get(VIRTUAL_RESOURCES, ['priorities', priority, 'id'])
    if status is not None:
        params['statusId'] = '' if status == '' else recursive_get(resources, ['statuses', status, 'id'])
    if resolution is not None:
        params['resolutionId'] = '' if resolution == '' else recursive_get(VIRTUAL_RESOURCES, ['resolutions', resolution, 'id'])
    if assignee is not None:
        params['assigneeId'] = '' if assignee == '' else recursive_get(users, [assignee, 'id'])

    resource = request_post_backlog_resources(f'/api/v2/issues/{issue}', method='PATCH', params=params)
    print(f'{resource['issueKey']} {resource['summary']}')

    if 'parentIssueId' in params and recursive_get(resources, ['issues', parent_issue, 'id']) is None:
        recursive_set(resources, ['issues', parent_issue, 'id'], params['parentIssueId'])
        save_registry(registry)


def do_list(args: argparse.Namespace):
    if BL_SPACE is None:
        raise PreconditionError('BL_SPACE is not set')
    if BL_API_KEY is None:
        raise PreconditionError('BL_API_KEY is not set')

    registry = load_registry()

    project = None if args.project == '' else args.project or BL_PROJECT
    if project is None:
        raise PreconditionError('no input project')
    project_id = recursive_get(registry, ['caches', 'spaces', BL_SPACE, 'projects', project, 'id'])
    if project_id is None:
        raise PreconditionError(f'project not synced \'{project}\'')

    defaults = recursive_get(registry, ['defaults', 'spaces', BL_SPACE, 'projects', project, 'list'], {})
    users = recursive_get(registry, ['caches', 'spaces', BL_SPACE, 'users'], {})
    resources = recursive_get(registry, ['caches', 'spaces', BL_SPACE, 'projects', project], {})

    parent_issues = None if args.parent_issues == [] else args.parent_issues or defaults.get('parentIssues')
    issue_types = None if args.issue_types == [] else args.issue_types or defaults.get('issueTypes')
    categories = None if args.categories == [] else args.categories or defaults.get('categories')
    versions = None if args.versions == [] else args.versions or defaults.get('versions')
    milestones = None if args.milestones == [] else args.milestones or defaults.get('milestones')
    priorities = None if args.priorities == [] else args.priorities or defaults.get('priorities')
    statuses = None if args.statuses == [] else args.statuses or defaults.get('statuses')
    resolutions = None if args.resolutions == [] else args.resolutions or defaults.get('resolutions')
    assignees = None if args.assignees == [] else args.assignees or defaults.get('assignees')
    keyword = None if args.keyword == '' else args.keyword or defaults.get('keyword')
    sort = None if args.sort == '' else args.sort or defaults.get('sort')
    order = None if args.order == '' else args.order or defaults.get('order')
    offset = None if args.offset == '' else args.offset or defaults.get('offset')
    count = None if args.count == '' else args.count or defaults.get('count')
    if not (parent_issues is None or parent_issues == [] or parent_issues == ['']) and any([i == '' for i in parent_issues]):
        raise PreconditionError('unrecognized parent issue %s' % ', '.join([f'\'{i}\'' for i in parent_issues if i == '']))
    if not (issue_types is None or issue_types == [] or issue_types == ['']) and any([recursive_get(resources, ['issueTypes', c, 'id']) is None for c in issue_types]):
        raise PreconditionError('unrecognized issue types %s' % ', '.join([f'\'{t}\'' for t in issue_types if recursive_get(resources, ['issueTypes', t, 'id']) is None]))
    if not (categories is None or categories == [] or categories == ['']) and any([recursive_get(resources, ['categories', c, 'id']) is None for c in categories]):
        raise PreconditionError('unrecognized category %s' % ', '.join([f'\'{c}\'' for c in categories if recursive_get(resources, ['categories', c, 'id']) is None]))
    if not (versions is None or versions == [] or versions == ['']) and any([recursive_get(resources, ['versions', v, 'id']) is None for v in versions]):
        raise PreconditionError('unrecognized version %s' % ', '.join([f'\'{v}\'' for v in versions if recursive_get(resources, ['versions', v, 'id']) is None]))
    if not (milestones is None or milestones == [] or milestones == ['']) and any([recursive_get(resources, ['versions', m, 'id']) is None for m in milestones]):
        raise PreconditionError('unrecognized milestone %s' % ', '.join([f'\'{m}\'' for m in milestones if recursive_get(resources, ['versions', m, 'id']) is None]))
    if not (priorities is None or priorities == [] or priorities == ['']) and any([recursive_get(VIRTUAL_RESOURCES, ['priorities', p, 'id']) is None for p in priorities]):
        raise PreconditionError('unrecognized priorities %s' % ', '.join([f'\'{p}\'' for p in priorities if recursive_get(VIRTUAL_RESOURCES, ['priorities', p, 'id']) is None]))
    if not (statuses is None or statuses == [] or statuses == ['']) and any([recursive_get(resources, ['statuses', s, 'id']) is None for s in statuses]):
        raise PreconditionError('unrecognized statuses %s' % ', '.join([f'\'{s}\'' for s in statuses if recursive_get(resources, ['statuses', s, 'id']) is None]))
    if not (resolutions is None or resolutions == [] or resolutions == ['']) and any([recursive_get(VIRTUAL_RESOURCES, ['resolutions', r, 'id']) is None for r in resolutions]):
        raise PreconditionError('unrecognized resolutions %s' % ', '.join([f'\'{r}\'' for r in resolutions if recursive_get(VIRTUAL_RESOURCES, ['resolutions', r, 'id']) is None]))
    if not (assignees is None or assignees == [] or assignees == ['']) and any([recursive_get(users, [a, 'id']) is None for a in assignees]):
        raise PreconditionError('unrecognized assignees %s' % ', '.join([f'\'{a}\'' for a in assignees if recursive_get(users, [a, 'id']) is None]))

    params = {}
    if project_id is not None:
        params['projectId[]'] = project_id
    if parent_issues is not None and parent_issues != [] and parent_issues != ['']:
        params['parentIssueId[]'] = [recursive_get(resources, ['issues', i, 'id']) or request_get_backlog_resources(f'/api/v2/issues/{i}', delay_sec=1)['id'] for i in parent_issues]
    if parent_issues is not None and parent_issues != [] and parent_issues != ['']:
        params['parentIssueId[]'] = [recursive_get(resources, ['issues', i, 'id']) or request_get_backlog_resources(f'/api/v2/issues/{i}', delay_sec=1)['id'] for i in parent_issues]
    if issue_types is not None and issue_types != [] and issue_types != ['']:
        params['issueTypeId[]'] = [recursive_get(resources, ['issueTypes', t, 'id']) for t in issue_types]
    if categories is not None and categories != [] and categories != ['']:
        params['categoryId[]'] = [recursive_get(resources, ['categories', c, 'id']) for c in categories]
    if versions is not None and versions != [] and versions != ['']:
        params['versionId[]'] = [recursive_get(resources, ['versions', v, 'id']) for v in versions]
    if milestones is not None and milestones != [] and milestones != ['']:
        params['milestoneId[]'] = [recursive_get(resources, ['versions', m, 'id']) for m in milestones]
    if priorities is not None and priorities != [] and priorities != ['']:
        params['priorityId[]'] = [recursive_get(VIRTUAL_RESOURCES, ['priorities', p, 'id']) for p in priorities]
    if statuses is not None and statuses != [] and statuses != ['']:
        params['statusId[]'] = [recursive_get(resources, ['statuses', s, 'id']) for s in statuses]
    if resolutions is not None and resolutions != [] and resolutions != ['']:
        params['resolutionId[]'] = [recursive_get(VIRTUAL_RESOURCES, ['resolutions', r, 'id']) for r in resolutions]
    if assignees is not None and assignees != [] and assignees != ['']:
        params['assigneeId[]'] = [recursive_get(users, [a, 'id']) for a in assignees]
    if keyword is not None and keyword != '':
        params['keyword'] = keyword
    if sort is not None and sort != '':
        params['sort'] = sort
    if order is not None and order != '':
        params['order'] = order
    if offset is not None and offset != '':
        params['offset'] = offset
    if count is not None and count != '':
        params['count'] = count

    for resource in request_get_backlog_resources('/api/v2/issues', params=params):
        print(f'{resource['issueKey']} {resource['summary']}')

    if parent_issues is not None and 'parentIssueId[]' in params:
        changed = False
        for i, parent_issue in enumerate(parent_issues):
            if parent_issue != '' and recursive_get(resources, ['issues', parent_issue, 'id']) is None:
                recursive_set(resources, ['issues', parent_issue, 'id'], params['parentIssueId[]'][i])
                changed = True
        if changed:
            save_registry(registry)


def do_show(args: argparse.Namespace):
    if BL_SPACE is None:
        raise PreconditionError('BL_SPACE is not set')
    if BL_API_KEY is None:
        raise PreconditionError('BL_API_KEY is not set')

    issue = args.issue
    if issue is None:
        raise PreconditionError('no input issue')

    resource = request_get_backlog_resources(f'/api/v2/issues/{issue}')
    print(resource['description'])


def do_edit(args: argparse.Namespace):
    if BL_SPACE is None:
        raise PreconditionError('BL_SPACE is not set')
    if BL_API_KEY is None:
        raise PreconditionError('BL_API_KEY is not set')
    if os.getenv('EDITOR') is None:
        raise PreconditionError('EDITOR is not set')

    issue = args.issue
    if issue is None:
        raise PreconditionError('no input issue')

    resource = request_get_backlog_resources(f'/api/v2/issues/{issue}')
    with tempfile.NamedTemporaryFile(mode='w+', delete_on_close=False) as fp:
        fp.write(resource['description'] + '\n')
        fp.close()

        result = subprocess.run('$EDITOR "$BL_TEMPFILE"', shell=True, env=dict(**os.environ, **{'BL_TEMPFILE': fp.name}))
        if result.returncode != 0:
            raise PreconditionError('editor command failed')

        description = re.sub(r'\n\Z', '', pathlib.Path(fp.name).read_text())
        if description != resource['description']:
            request_post_backlog_resources(f'/api/v2/issues/{issue}', method='PATCH', params={'description': description})

        print(f'{resource['issueKey']} {resource['summary']}')


def do_open(args: argparse.Namespace):
    if BL_SPACE is None:
        raise PreconditionError('BL_SPACE is not set')

    issue = args.issue
    if issue is None:
        raise PreconditionError('no input issue')

    issue_url = f'https://{BL_SPACE}/view/{issue}'
    open_command = None
    for command in OPEN_COMMANDS:
        if shutil.which(command) is not None:
            open_command = command
            break
    if open_command is None:
        raise PreconditionError('open command installed')

    result = subprocess.run('"$BL_OPEN_COMMAND" "$BL_ISSUE_URL"', shell=True, env=dict(**os.environ, **{'BL_OPEN_COMMAND': open_command, 'BL_ISSUE_URL': issue_url}))
    if result.returncode != 0:
        raise PreconditionError('open command failed')


def do_resource_sync(args: argparse.Namespace):
    if BL_SPACE is None:
        raise PreconditionError('BL_SPACE is not set')
    if BL_API_KEY is None:
        raise PreconditionError('BL_API_KEY is not set')

    registry = load_registry()

    project = None if args.project == '' else args.project or BL_PROJECT
    if project is None:
        raise PreconditionError('no input project')

    recursive_set_default(registry, ['defaults', 'spaces', BL_SPACE, 'projects', project], {})
    recursive_set_default(registry, ['caches', 'spaces', BL_SPACE, 'users'], {})
    recursive_set_default(registry, ['caches', 'spaces', BL_SPACE, 'projects', project], {})
    defaults = recursive_get(registry, ['defaults', 'spaces', BL_SPACE, 'projects', project], {})
    users = recursive_get(registry, ['caches', 'spaces', BL_SPACE, 'users'], {})
    resources = recursive_get(registry, ['caches', 'spaces', BL_SPACE, 'projects', project], {})

    recursive_set_default(defaults, ['create', 'parentIssue'], None)
    recursive_set_default(defaults, ['create', 'startDate'], 'today')
    recursive_set_default(defaults, ['create', 'dueDate'], 'today')
    recursive_set_default(defaults, ['create', 'estimatedHours'], None)
    recursive_set_default(defaults, ['create', 'actualHours'], None)
    recursive_set_default(defaults, ['create', 'issueType'], None)
    recursive_set_default(defaults, ['create', 'categories'], [])
    recursive_set_default(defaults, ['create', 'versions'], [])
    recursive_set_default(defaults, ['create', 'milestones'], [])
    recursive_set_default(defaults, ['create', 'priority'], '中')
    recursive_set_default(defaults, ['create', 'assignee'], 'myself')
    recursive_set_default(defaults, ['list', 'parentIssues'], [])
    recursive_set_default(defaults, ['list', 'issueTypes'], [])
    recursive_set_default(defaults, ['list', 'categories'], [])
    recursive_set_default(defaults, ['list', 'versions'], [])
    recursive_set_default(defaults, ['list', 'milestones'], [])
    recursive_set_default(defaults, ['list', 'priorities'], [])
    recursive_set_default(defaults, ['list', 'statuses'], [])
    recursive_set_default(defaults, ['list', 'resolutions'], [])
    recursive_set_default(defaults, ['list', 'assignees'], [])
    recursive_set_default(defaults, ['list', 'keyword'], None)
    recursive_set_default(defaults, ['list', 'sort'], 'created')
    recursive_set_default(defaults, ['list', 'order'], 'desc')
    recursive_set_default(defaults, ['list', 'offset'], 0)
    recursive_set_default(defaults, ['list', 'count'], 20)
    if recursive_get(users, ['myself', 'id']) is None:
        resource = request_get_backlog_resources('/api/v2/users/myself', delay_sec=1)
        recursive_set(users, ['myself', 'id'], resource['id'])
    if recursive_get(resources, ['id']) is None:
        resource = request_get_backlog_resources(f'/api/v2/projects/{project}', delay_sec=1)
        recursive_set(resources, ['id'], resource['id'])
    recursive_set(resources, ['issueTypes'], {})
    recursive_set(resources, ['categories'], {})
    recursive_set(resources, ['versions'], {})
    recursive_set(resources, ['statuses'], {})
    recursive_set_default(resources, ['issues'], {})
    for resource in request_get_backlog_resources(f'/api/v2/projects/{project}/issueTypes', delay_sec=1):
        recursive_set(resources, ['issueTypes', resource['name']], {
            'id': resource['id'],
            'displayOrder': resource['displayOrder'],
            'templateDescription': resource['templateDescription'].replace('\r\n', '\n') if resource['templateDescription'] is not None else None,
        })
    for resource in request_get_backlog_resources(f'/api/v2/projects/{project}/categories', delay_sec=1):
        recursive_set(resources, ['categories', resource['name']], {
            'id': resource['id'],
            'displayOrder': resource['displayOrder'],
        })
    for resource in request_get_backlog_resources(f'/api/v2/projects/{project}/versions', delay_sec=1):
        recursive_set(resources, ['versions', resource['name']], {
            'id': resource['id'],
            'displayOrder': resource['displayOrder'],
        })
    for resource in request_get_backlog_resources(f'/api/v2/projects/{project}/statuses', delay_sec=1):
        recursive_set(resources, ['statuses', resource['name']], {
            'id': resource['id'],
            'displayOrder': resource['displayOrder'],
        })

    save_registry(registry)


def do_resource_list(args: argparse.Namespace):
    resource_type = args.resource_type
    if resource_type is None:
        raise PreconditionError('no input resource type')
    if resource_type not in RESOURCE_TYPES:
        raise PreconditionError(f'unrecognized resource type \'{resource_type}\'')

    resource_names = []
    if resource_type in VIRTUAL_RESOURCES:
        resource_names = list(VIRTUAL_RESOURCES[resource_type].keys())
    elif resource_type == 'spaces':
        registry = load_registry()
        resource_names = recursive_get(registry, ['caches', 'spaces'], {}).keys()
    elif resource_type == 'users':
        if BL_SPACE is None:
            raise PreconditionError('BL_SPACE is not set')
        registry = load_registry()
        resource_names = recursive_get(registry, ['caches', 'spaces', BL_SPACE, 'users'], {}).keys()
    elif resource_type == 'projects':
        if BL_SPACE is None:
            raise PreconditionError('BL_SPACE is not set')
        registry = load_registry()
        resource_names = recursive_get(registry, ['caches', 'spaces', BL_SPACE, 'projects'], {}).keys()
    else:
        if BL_SPACE is None:
            raise PreconditionError('BL_SPACE is not set')
        project = None if args.project == '' else args.project or BL_PROJECT
        if project is None:
            raise PreconditionError('no input project')
        registry = load_registry()
        resources = recursive_get(registry, ['caches', 'spaces', BL_SPACE, 'projects', project, resource_type], {})
        resource_names = sorted(resources.keys(), key=lambda key: resources[key]['displayOrder'])

    for resource_name in resource_names:
        print(resource_name)


def do_configure(args: argparse.Namespace):
    if os.getenv('EDITOR') is None:
        raise PreconditionError('EDITOR is not set')

    subprocess.run('$EDITOR "$BL_REGISTRY"', shell=True, env=dict(**os.environ, **{'BL_REGISTRY': BL_REGISTRY}))


def do_completion(args: argparse.Namespace):
    shell = args.shell
    if shell is None:
        raise PreconditionError('no input shell')
    if shell not in SHELL_COMPLETION_SCRIPTS:
        raise PreconditionError(f'unrecognized shell \'{shell}\'')

    print(SHELL_COMPLETION_SCRIPTS[shell])


def do_help(args: argparse.Namespace):
    command = '-'.join(args.help_command)
    if command != '' and command not in SUBCMD_USAGE:
        raise PreconditionError(f'unrecognized command \'{command}\'')

    if command == '':
        print(CMD_USAGE)
    else:
        print(SUBCMD_USAGE[command])


def main():
    parser = argparse.ArgumentParser(prog=CMD_NAME, allow_abbrev=False, add_help=False, exit_on_error=False)
    parser.add_argument('-h', '--help', action='store_true', dest='root_help')
    parser.set_defaults(handler=None, command=None, help=False)

    subparsers = parser.add_subparsers()

    subparser_create = subparsers.add_parser('create', allow_abbrev=False, add_help=False)
    subparser_create.add_argument('-p', '--project', dest='project')
    subparser_create.add_argument('-I', '--parent-issue', dest='parent_issue')
    subparser_create.add_argument('-s', '--summary', dest='summary')
    subparser_create.add_argument('-d', '--description', dest='description')
    subparser_create.add_argument('-S', '--start-date', dest='start_date')
    subparser_create.add_argument('-D', '--due-date', dest='due_date')
    subparser_create.add_argument('-E', '--estimated-hours', dest='estimated_hours')
    subparser_create.add_argument('-A', '--actual-hours', dest='actual_hours')
    subparser_create.add_argument('-t', '--issue-type', dest='issue_type')
    subparser_create.add_argument('-c', '--category', dest='categories', action='append')
    subparser_create.add_argument('-v', '--version', dest='versions', action='append')
    subparser_create.add_argument('-m', '--milestone', dest='milestones', action='append')
    subparser_create.add_argument('-P', '--priority', dest='priority')
    subparser_create.add_argument('-a', '--assignee', dest='assignee')
    subparser_create.add_argument('-h', '--help', dest='help', action='store_true')
    subparser_create.set_defaults(handler=do_create, command='create')

    subparser_update = subparsers.add_parser('update', allow_abbrev=False, add_help=False)
    subparser_update.add_argument('-i', '--issue', dest='issue')
    subparser_update.add_argument('-I', '--parent-issue', dest='parent_issue')
    subparser_update.add_argument('-s', '--summary', dest='summary')
    subparser_update.add_argument('-d', '--description', dest='description')
    subparser_update.add_argument('-S', '--start-date', dest='start_date')
    subparser_update.add_argument('-D', '--due-date', dest='due_date')
    subparser_update.add_argument('-E', '--estimated-hours', dest='estimated_hours')
    subparser_update.add_argument('-A', '--actual-hours', dest='actual_hours')
    subparser_update.add_argument('-t', '--issue-type', dest='issue_type')
    subparser_update.add_argument('-c', '--category', dest='categories', action='append')
    subparser_update.add_argument('-v', '--version', dest='versions', action='append')
    subparser_update.add_argument('-m', '--milestone', dest='milestones', action='append')
    subparser_update.add_argument('-P', '--priority', dest='priority')
    subparser_update.add_argument('-T', '--status', dest='status')
    subparser_update.add_argument('-r', '--resolution', dest='resolution')
    subparser_update.add_argument('-a', '--assignee', dest='assignee')
    subparser_update.add_argument('-h', '--help', dest='help', action='store_true')
    subparser_update.set_defaults(handler=do_update, command='update')

    subparser_list = subparsers.add_parser('list', allow_abbrev=False, add_help=False)
    subparser_list.add_argument('-p', '--project', dest='project')
    subparser_list.add_argument('-I', '--parent-issue', dest='parent_issues', action='append')
    subparser_list.add_argument('-t', '--issue-type', dest='issue_types', action='append')
    subparser_list.add_argument('-c', '--category', dest='categories', action='append')
    subparser_list.add_argument('-v', '--version', dest='versions', action='append')
    subparser_list.add_argument('-m', '--milestone', dest='milestones', action='append')
    subparser_list.add_argument('-P', '--priority', dest='priorities', action='append')
    subparser_list.add_argument('-T', '--status', dest='statuses', action='append')
    subparser_list.add_argument('-r', '--resolution', dest='resolutions', action='append')
    subparser_list.add_argument('-a', '--assignee', dest='assignees', action='append')
    subparser_list.add_argument('-k', '--keyword', dest='keyword')
    subparser_list.add_argument('-s', '--sort', dest='sort')
    subparser_list.add_argument('-o', '--order', dest='order')
    subparser_list.add_argument('-O', '--offset', dest='offset')
    subparser_list.add_argument('-C', '--count', dest='count')
    subparser_list.add_argument('-h', '--help', dest='help', action='store_true')
    subparser_list.set_defaults(handler=do_list, command='list')

    subparser_show = subparsers.add_parser('show', allow_abbrev=False, add_help=False)
    subparser_show.add_argument('-h', '--help', dest='help', action='store_true')
    subparser_show.add_argument('issue', nargs='?')
    subparser_show.set_defaults(handler=do_show, command='show')

    subparser_edit = subparsers.add_parser('edit', allow_abbrev=False, add_help=False)
    subparser_edit.add_argument('-h', '--help', dest='help', action='store_true')
    subparser_edit.add_argument('issue', nargs='?')
    subparser_edit.set_defaults(handler=do_edit, command='edit')

    subparser_open = subparsers.add_parser('open', allow_abbrev=False, add_help=False)
    subparser_open.add_argument('-h', '--help', dest='help', action='store_true')
    subparser_open.add_argument('issue', nargs='?')
    subparser_open.set_defaults(handler=do_open, command='open')

    subparser_resource = subparsers.add_parser('resource', allow_abbrev=False, add_help=False)
    subparser_resources = subparser_resource.add_subparsers()

    subparser_resource_sync = subparser_resources.add_parser('sync', allow_abbrev=False, add_help=False)
    subparser_resource_sync.add_argument('-p', '--project', dest='project')
    subparser_resource_sync.add_argument('-h', '--help', dest='help', action='store_true')
    subparser_resource_sync.set_defaults(handler=do_resource_sync, command='resource-sync')

    subparser_resource_list = subparser_resources.add_parser('list', allow_abbrev=False, add_help=False)
    subparser_resource_list.add_argument('-p', '--project', dest='project')
    subparser_resource_list.add_argument('-h', '--help', dest='help', action='store_true')
    subparser_resource_list.add_argument('resource_type', choices=RESOURCE_TYPES, nargs='?')
    subparser_resource_list.set_defaults(handler=do_resource_list, command='resource-list')

    subparser_completion = subparsers.add_parser('completion', allow_abbrev=False, add_help=False)
    subparser_completion.add_argument('-h', '--help', dest='help', action='store_true')
    subparser_completion.add_argument('shell', nargs='?')
    subparser_completion.set_defaults(handler=do_completion, command='completion')

    subparser_configure = subparsers.add_parser('configure', allow_abbrev=False, add_help=False)
    subparser_configure.add_argument('-h', '--help', dest='help', action='store_true')
    subparser_configure.set_defaults(handler=do_configure, command='configure')

    subparser_help = subparsers.add_parser('help', allow_abbrev=False, add_help=False)
    subparser_help.add_argument('-h', '--help', dest='help', action='store_true')
    subparser_help.add_argument('help_command', nargs='*')
    subparser_help.set_defaults(handler=do_help, command='help')

    try:
        args = parser.parse_args()
        if args.root_help:
            print(CMD_USAGE)
            return sys.exit(0)
        if args.command is not None and args.help:
            print(SUBCMD_USAGE[args.command])
            return sys.exit(0)

        if args.command is None:
            print(CMD_USAGE)
            return sys.exit(1)

        args.handler(args)
    except (argparse.ArgumentError, PreconditionError) as e:
        warn(e)
        return sys.exit(1)
    except urllib.error.HTTPError as e:
        warn('error response: ' + e.read().decode('utf-8'))
        return sys.exit(1)


if __name__ == '__main__':
    main()
